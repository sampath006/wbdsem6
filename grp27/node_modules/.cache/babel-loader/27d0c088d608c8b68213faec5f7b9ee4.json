{"ast":null,"code":"var _jsxFileName = \"/Users/sampathkumarreddymanam/Documents/sem6/wbd/project-28-03/grp27/src/components/singleEvent/SingleEvent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\nimport { useLocation, Link } from \"react-router-dom\";\nimport \"./singleEvent.css\";\nimport { Context } from \"../../context/Context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SingleEvent = () => {\n  _s();\n\n  //Using window location to get the url\n  const location = useLocation();\n  const path = location.pathname.split(\"/\")[2];\n  const [event, setEvent] = useState({}); //fetching image from local host 5000\n\n  const PF = \"http://localhost:5000/images/\"; //Fetching user from context\n\n  const {\n    user\n  } = useContext(Context); //Declaring set and use states\n\n  const [title, setTitle] = useState(\"\");\n  const [desc, setDesc] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [prize, setPrize] = useState(\"\");\n  const [venue, setVenue] = useState(\"\");\n  const [updateMode, setUpdateMode] = useState(false); //It gets the value of the set variable\n\n  useEffect(() => {\n    const getEvent = async () => {\n      const res = await axios.get(\"/events/\" + path);\n      setEvent(res.data);\n      setTitle(res.data.title);\n      setDesc(res.data.desc);\n      setDate(res.data.date);\n      setPrize(res.data.prize);\n      setVenue(res.data.venue);\n    };\n\n    getEvent();\n  }, [path]); //It handles the delete functionality of an event\n\n  const handleDelete = async () => {\n    try {\n      await axios.delete(`/events/${event._id}`, {\n        data: {\n          username: user.username\n        }\n      });\n      window.location.replace(\"/\"); //after deleting it reloads the page\n    } catch (err) {}\n  }; //Handles the update event functionality of an event\n\n\n  const handleUpdate = async () => {\n    try {\n      await axios.put(`/events/${event._id}`, {\n        username: user.username,\n        title,\n        desc,\n        date,\n        prize,\n        venue\n      });\n      window.location.reload(\"/\"); //after updating it reloads the page\n    } catch (err) {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"singleEvent\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"singleEventWrapper\",\n      children: [event.photo && /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"singleWrappereImg\",\n        src: PF + event.photo,\n        alt: \"\",\n        className: \"singleEventImg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this), updateMode ? /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"singleEventTitleInput\",\n        value: title,\n        autoFocus: true,\n        onChange: e => setTitle(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 26\n      }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"singleEventTitle\",\n        children: [event.title, event.username === (user === null || user === void 0 ? void 0 : user.username) && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"singleEventEdit\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"singleEventIcon far fa-edit\",\n            onClick: () => setUpdateMode(true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"singleEventIcon far fa-trash-alt\",\n            onClick: handleDelete\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"singleEventInfo\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"singleEventAuthor\",\n          children: [\"Organized By :\", /*#__PURE__*/_jsxDEV(Link, {\n            to: `/?user=${event.username}`,\n            className: \"link\",\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: [\" \", event.username, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 70\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"singleEventDate\",\n          children: [\"Win:$\", event.prize]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"singleEventDate\",\n          children: [\"On : \", new Date(event.date).toDateString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this), updateMode ? /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"singleEventVenueInput\",\n        value: venue,\n        autoFocus: true,\n        onChange: e => setVenue(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"singleEventVenue\",\n        children: event.venue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this), updateMode ? /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"singleEventDescInput\",\n        value: desc,\n        onChange: e => setDesc(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"singleEventDesc\",\n        children: event.desc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this), updateMode && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"singleEventButton\",\n        onClick: handleUpdate,\n        children: \" Update \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 7\n  }, this);\n};\n\n_s(SingleEvent, \"12oHNMWEoNWakq4oOeGTN151QZI=\", false, function () {\n  return [useLocation];\n});\n\n_c = SingleEvent;\nexport default SingleEvent;\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleEvent\");","map":{"version":3,"sources":["/Users/sampathkumarreddymanam/Documents/sem6/wbd/project-28-03/grp27/src/components/singleEvent/SingleEvent.js"],"names":["React","useState","useEffect","useContext","axios","useLocation","Link","Context","SingleEvent","location","path","pathname","split","event","setEvent","PF","user","title","setTitle","desc","setDesc","date","setDate","prize","setPrize","venue","setVenue","updateMode","setUpdateMode","getEvent","res","get","data","handleDelete","delete","_id","username","window","replace","err","handleUpdate","put","reload","photo","e","target","value","Date","toDateString"],"mappings":"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","sourcesContent":["import React,{useState,useEffect, useContext} from \"react\";\r\nimport axios from \"axios\";\r\nimport {useLocation, Link } from \"react-router-dom\";\r\nimport \"./singleEvent.css\";\r\nimport { Context } from \"../../context/Context\";\r\n\r\nconst SingleEvent = () => {\r\n\r\n  //Using window location to get the url\r\n  const location = useLocation();\r\n  const path = location.pathname.split(\"/\")[2];\r\n  const [event, setEvent] = useState({});\r\n\r\n  //fetching image from local host 5000\r\n  const PF = \"http://localhost:5000/images/\"\r\n\r\n  //Fetching user from context\r\n  const {user} = useContext(Context)\r\n\r\n  //Declaring set and use states\r\n  const [title, setTitle] = useState(\"\");\r\n  const [desc, setDesc] = useState(\"\");\r\n  const [date, setDate] = useState(\"\");\r\n  const [prize, setPrize] = useState(\"\");\r\n  const [venue, setVenue] = useState(\"\");\r\n\r\n  const [updateMode, setUpdateMode] = useState(false);\r\n\r\n  //It gets the value of the set variable\r\n  useEffect(()=>{\r\n    const getEvent = async ()=>{\r\n      const res = await axios.get(\"/events/\"+path);\r\n      setEvent(res.data);\r\n      setTitle(res.data.title);\r\n      setDesc(res.data.desc);\r\n      setDate(res.data.date);\r\n      setPrize(res.data.prize);\r\n      setVenue(res.data.venue);\r\n    };\r\n    getEvent()\r\n  },[path])\r\n\r\n\r\n//It handles the delete functionality of an event\r\n  const handleDelete = async ()=>{\r\n    try {\r\n      await axios.delete(`/events/${event._id}`,{\r\n        data:{username:user.username},\r\n      });\r\n      window.location.replace(\"/\");//after deleting it reloads the page\r\n\r\n    } catch (err) {\r\n      \r\n    }\r\n  }\r\n\r\n  //Handles the update event functionality of an event\r\n  const handleUpdate = async ()=>{\r\n    try {\r\n      await axios.put(`/events/${event._id}`,{\r\n        username:user.username, title,desc,date,prize,venue,\r\n      });\r\n      window.location.reload(\"/\");//after updating it reloads the page\r\n\r\n    } catch (err) {\r\n      \r\n    }\r\n  }\r\n  \r\n  return (\r\n      <div className=\"singleEvent\">\r\n        <div className=\"singleEventWrapper\">\r\n        {/* Fetching the data of a single event and displaying it */}\r\n          {event.photo && (\r\n            <img className=\"singleWrappereImg\"\r\n            src={PF + event.photo}\r\n            alt=\"\"\r\n            className=\"singleEventImg\"\r\n          />\r\n          )}{\r\n            updateMode ? <input type=\"text\" className=\"singleEventTitleInput\" value={title} autoFocus  onChange={(e)=>setTitle(e.target.value)}/> : (\r\n              <h1 className=\"singleEventTitle\">\r\n            {event.title}\r\n            {/* Only the admin who added the event can edit and delete the events */}\r\n            {event.username === user?.username && (\r\n              <div className=\"singleEventEdit\">\r\n              <i className=\"singleEventIcon far fa-edit\" onClick={()=>setUpdateMode(true)}></i>\r\n                <i className=\"singleEventIcon far fa-trash-alt\" onClick={handleDelete}></i>\r\n              </div>\r\n            )}\r\n          </h1>\r\n            )\r\n          }\r\n          {/* fetching the details like origanizer,venue and price */}\r\n          <div className=\"singleEventInfo\">\r\n            <span className=\"singleEventAuthor\">\r\n              Organized By :  \r\n              <Link to={`/?user=${event.username}`} className=\"link\"><b> {event.username} </b></Link>\r\n            </span>\r\n            <span className=\"singleEventDate\">Win:${event.prize}</span>\r\n            <span className=\"singleEventDate\">On : {new Date(event.date).toDateString()}</span>\r\n          </div>\r\n          {updateMode ? <input type=\"text\" className=\"singleEventVenueInput\" value={venue} autoFocus  onChange={(e)=>setVenue(e.target.value)}/> : (\r\n            <p className=\"singleEventVenue\">{event.venue}</p>\r\n          ) }\r\n          {/* if it is update mode then the admin can update the description of the event */}\r\n          {updateMode ? <textarea className=\"singleEventDescInput\" value={desc} onChange={(e)=>setDesc(e.target.value)}/> : (\r\n            <p className=\"singleEventDesc\">{event.desc}</p>\r\n          ) }\r\n          {updateMode && <button className=\"singleEventButton\" onClick={handleUpdate}> Update </button>}\r\n        </div>\r\n      </div>\r\n\r\n\r\n  );\r\n}\r\n\r\nexport default SingleEvent;"]},"metadata":{},"sourceType":"module"}